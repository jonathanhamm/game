{
  "hello": 1
}
{
  Mesh square1 := {
  "vertices": [
     0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 1.0, 0.0, 1.0, 0.0,
     1.0, 0.0, 0.0, 0.0, 1.0,
     1.0, 1.0, 0.0, 1.0, 1.0
   ]
  }

  Mesh square2 := {
  "vertices": [
     0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 1.0, 1.0, 0.0,
     1.0, 0.0, 0.0, 0.0, 1.0,
     1.0, 0.0, 1.0, 1.0, 1.0
   ]
  }


  Texture texture := {
    "path": "textures/basic1.png"
  }

  Program program := {
    "vertex": {
      "src":
        "#version 400

        uniform mat4 camera;

				in vec3 pos;
				in vec3 scale;

        in vec3 vert;
        in vec2 vertexCoord;

        out vec2 fragTexCoord;


				mat4 toTranslate(vec3 pos){
						return mat4(
								vec4(1.0, 0.0, 0.0, 0.0),
								vec4(0.0, 1.0, 0.0, 0.0),
								vec4(0.0, 0.0, 1.0, 0.0),
								vec4(pos, 1.0)
						);
				}

				mat4 toScale(vec3 scale){
						return mat4(
								vec4(scale.x, 0.0, 0.0, 0.0),
								vec4(0.0, scale.y, 0.0, 0.0),
								vec4(0.0, 0.0, scale.z, 0.0),
								vec4(0.0, 0.0, 0.0, 1.0)
						);
				}

        void main() {
						mat4 model =  toTranslate(pos) * toScale(scale);
            fragTexCoord = vertexCoord;
            gl_Position = camera * model * vec4(vert, 1);
        }
      " 
    },
    /* "tessellation": {
      "src": "test1" 
    },
    "evaluation": {
      "src": "test1" 
    },
    "geometry": {
      "src": "test1" 
    },*/
    "fragment": {
      "src":
        "#version 400

          uniform sampler2D tex;

          in vec2 fragTexCoord;

          out vec4 finalColor;

          void main() {
              finalColor = texture(tex, fragTexCoord);
              //finalColor =  texture(tex, fragTexCoord) * vec4(0.5, 0.5, 1.0, 1.0);
              //finalColor = vec4(fragTexCoord, 0, 1) * vec4(0.5, 0.5, 1.0, 1.0);
          }
        "
    }
    /*
    "compute": {
      "src": "test1" 
    }*/
  }

  Model m1 := {
    "mesh": square1,
    "program": program,
    "hasUV": 1,
    "texture": texture
  }
  Model m2 := {
    "mesh": square2,
    "program": program,
    "hasUV": 1,
    "texture": texture
  }

  Int tunnelLength := 100
  Int tunnelWidth := 10
  Int tunnelScale := 10
  Level level := {
    "name": "hello",
    "ambientGravity": [0, 0, 0],
    "ranges": [{
      "steps": tunnelLength,
      "var": "x",
      "cache": 0,
      "child": {
        "steps": tunnelWidth,
        "var": "y",
        "cache": 1,
        "instances": [
			    { "x": "10*x", "y": "10*y", "z": 0, "mass": 1.0, "model": m1, "scalex": 10, "scaley": 10, "isSubjectToGravity": 1, "isStatic": 0},
			    { "x": "10*x", "y": "10*y", "z": tunnelWidth*tunnelScale, "mass": 1.0, "model": m1, "scalex": 10, "scaley": 10, "isSubjectToGravity": 1, "isStatic": 0},
			    { "x": "10*x", "y": "0", "z": "10*y", "mass": 1.0, "model": m2, "scalex": 10, "scalez": 10, "isSubjectToGravity": 1, "isStatic": 0},
			    { "x": "10*x", "y": tunnelWidth*tunnelScale, "z": "10*y", "mass": 1.0, "model": m2, "scalex": 10, "scalez": 10, "isSubjectToGravity": 1, "isStatic": 0}
        ]
      },
      "instances": [
			    { "x": "10*x", "y": "400", "z": 0, "mass": 1.0, "model": m1, "scalex": 10, "scaley": 10, "isSubjectToGravity": 1, "isStatic": 0}
      ]
    }],
    "instances": [
			{ "x": 0.0, "y": 0.0, "z": 0, "mass": 1.0, "model": m1, "scalex": 10, "scaley": 10, "isSubjectToGravity": 1, "isStatic": 0}
    ]
  }

}

